@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sbol: <http://sbols.org/v3#> .
@prefix sep054: <http://sbols.org/SEP054#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@base <http://sbols.org/SEP054#> .

sep054: rdf:type owl:Ontology ;
                               owl:imports sbol: ;
                               rdfs:comment "Package management classes from SEP 054" ;
                               owl:versionInfo "1.0-alpha1" .

sep054:Dependency rdf:type owl:Class ;
        rdfs:comment  '''A Dependency is a statement that a module or package refers to TopLevel objects from other
        modules or packages. Dependencies may be declared at various levels of granularity:
        * Object: only an individual TopLevel object (along with all of its child objects)
        * Object and references: a TopLevel object and all of the other TopLevel objects that it references in its
          definition, except for via provenance (PROV-O) relations.
        * Module: all of the TopLevel objects in a module, implicitly including all of its dependencies
        * Package: all of the modules in a package, implicitly including all of its dependencies.

        A dependency list MAY contain redundant or overlapping entries. For example, a dependency list may contain
        both a package and a supackage within that package, both a subpackage and specific objects in the subpackage,
        or even multiple entries for the same object. In such cases, the effective dependency list is the union of all
        of the individual dependencies in the list.

        This permissive unioning behavior is intended to allow independently defined dependency lists to be safely
        merged, e.g., in a package that depends on two other packages. Accordingly, a tool SHOULD NOT consider it to be
        an issue if there are redundancies between Dependency objects contained by different Package objects. A tool
        MAY, however, choose to warn users about redundancies within the dependencies of an individual Package.''';
        rdfs:subClassOf sbol:Identified ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom sep054:Package ; owl:onProperty sep054:package ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom xsd:string ; owl:onProperty sep054:versionConstraint ;
      owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom sep054:Package ; owl:onProperty sep054:subpackage ;
      owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom sbol:TopLevel ; owl:onProperty sep054:object ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom xsd:boolean ; owl:onProperty sep054:includeObjectReferences ;
      owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] .

sep054:package rdf:type owl:ObjectProperty ;
        rdfs:comment '''Root package that is the dependency or contains the dependency''' ;
              rdfs:domain sep054:Dependency ;
              rdfs:range sep054:Package ;
              rdfs:label "package" .

sep054:versionConstraint rdf:type owl:DatatypeProperty ;
        rdfs:comment '''Statement indicating the version of the package to use. Versions SHOULD use SemVer format.
        If this property is not provided, then any version is considered acceptable, with the highest version preferred.
        Future work: expand to include constraints as well, e.g., >=1.2, <2''' ;
              rdfs:domain sep054:Dependency ;
              rdfs:range xsd:string ;
              rdfs:label "versionConstraint" .

sep054:subpackage rdf:type owl:ObjectProperty ;
        rdfs:comment '''If the dependency is or is contained within a specific sub-package within the package,
        this property specifies its URI.''' ;
              rdfs:domain sep054:Dependency ;
              rdfs:range sep054:Package ;
              rdfs:label "module" .

sep054:object rdf:type owl:ObjectProperty ;
        rdfs:comment '''If dependency is specific TopLevel objects rather than a complete package, each instance of
        this property indicates one of those objects.''' ;
              rdfs:domain sep054:Dependency ;
              rdfs:range sbol:TopLevel ;
              rdfs:label "objects" .

sep054:includeObjectReferences rdf:type owl:DatatypeProperty ;
        rdfs:comment '''By default, object dependencies are only to the specific object itself. If this value is set
        to true, then object dependencies also imply dependencies on all of the TopLevel objects recursively referred
        to by objects in the dependency set. For example, dependency on a plasmid implies depending on the insert
        it is carrying, which depends in turn on the functional units in the insert, which also depends on the basic
        parts like promoters, CDSs, terminators, that they contain.''' ;
              rdfs:domain sep054:Dependency ;
              rdfs:range xsd:boolean  ;
              rdfs:label "includeObjectReferences" .


sep054:Package rdf:type owl:Class ;
        rdfs:comment  '''A Package is a systematic aggregation of SBOL materials intended to be distributed and used
        as a coherent whole. A package is associated with a specific namespace, and all TopLevel objects in the package
        must share that namespace. When stored in a hierarchical structure (e.g., files in directories), the
        relationship between package namespaces MUST be identical to the relationship between package locations in the
        structure. Note that packages can have sub-packages.

        The `displayId` of a Package SHOULD be `package`.

        Every member of a Package MUST have the same value for `hasNamespace` as the package itself.

        A package SHOULD have `dissociated` set only if `conversion` is also true.

        A package SHOULD only have values for `subPackage` if it is a native package (i.e., `conversion` is false).

        For packages with `conversion` equal to true, the `version` property SHOULD match its major version number to
        the major version of the data source, where applicable. Other elements of the versioning SHOULD be used to
        indicate versioning of the converted material.

        Note that any change to the sequence of a part SHOULD be a major version change, since there is no guarantee
        that the part will continue to have the same behavior. There are certain circumstances where it would not be,
        such as correcting a bug in which a sequence was not listed correctly to begin with. To add a sequence that is
        expected to have better performance, do not change the sequence: add a new part and deprecate the old one.

        Every Package object pointed to by `subPackage` MUST have a `hasNamespace` that is equal to the `hasNamespace`
        of the Package object plus a local sub-path. For example `https://example.org/MyPackage/` might have
        `subPackage` values `https://example.org/MyPackage/promoters` and
        `https://example.org/MyPackage/regulatory/repressors`''' ;
        # Should subclass sbol:Collection: workaround for https://github.com/SynBioDex/sbol_factory/issues/74
        rdfs:subClassOf sbol:TopLevel ,
    # member property is a workaround for https://github.com/SynBioDex/sbol_factory/issues/74
    [ rdf:type owl:Restriction ; owl:allValuesFrom sbol:TopLevel  ; owl:onProperty sep054:member ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom xsd:string ; owl:onProperty sep054:version ;
      owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom xsd:boolean ; owl:onProperty sep054:conversion ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom xsd:string ; owl:onProperty sep054:dissociated ;
      owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom sep054:Dependency ; owl:onProperty sep054:hasDependency ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom sep054:Package ; owl:onProperty sep054:subPackage ; ] .

sep054:member rdf:type owl:ObjectProperty ;
        rdfs:comment '''Workaround for https://github.com/SynBioDex/sbol_factory/issues/74''' ;
              rdfs:domain sep054:Package  ;
              rdfs:range sbol:TopLevel  ;
              rdfs:label "members" .


sep054:version rdf:type owl:DatatypeProperty ;
        rdfs:comment '''The value of this property SHOULD use SemVer to indicate the version of this package. This
        property SHOULD be set if and only if a package is a root package.''' ;
              rdfs:domain sep054:Package ;
              rdfs:range xsd:string ;
              rdfs:label "version" .

sep054:conversion rdf:type owl:DatatypeProperty ;
        rdfs:comment '''Indicates if this is a native package (false) or conversion package (true)''' ;
              rdfs:domain sep054:Package ;
              rdfs:range xsd:boolean ;
              rdfs:label "conversion" .

sep054:dissociated rdf:type owl:DatatypeProperty ;
        rdfs:comment '''If not set, this is an atomic package. If set, indicates this package is a dissociated package
        of the type identified by the string.''' ;
              rdfs:domain sep054:Package ;
              rdfs:range xsd:string ;
              rdfs:label "dissociated" .

sep054:hasDependency rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property links to a description of a package dependency''' ;
               rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain sep054:Package ;
              rdfs:range sep054:Dependency ;
              rdfs:label "dependencies" .

sep054:subPackage rdf:type owl:ObjectProperty ;
        rdfs:comment '''Indicates the set of sub-`Package` objects aggregated in the `Package`.''' ;
              rdfs:domain sep054:Package ;
              rdfs:range sep054:Package ;
              rdfs:label "subpackages" .


